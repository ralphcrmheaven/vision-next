input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Meeting @model(mutations: {update:"updateMeetingGraphQL" , create: "createMeetingGraphQL", delete: "deleteMeetingGraphQL"}, subscriptions: null) {
  meetingId: String! 
  isRecording: Boolean
  title: String! @primaryKey
  data: String!
  passcode: String
}

type Attendee @model(mutations: {create: "createAttendeeGraphQL", delete: "deleteAttendeeGraphQL"}, subscriptions: null) {
  attendeeId: String! @primaryKey
  name: String!
}

type Contact @model(mutations: {
    create: "createContactGraphQL",
    delete: "deleteContactGraphQL",
    update: "updateContactGraphQL",
  }) {
  email: String! @primaryKey
  userId: String! # get attribute sub of cognito
  name: String
  phoneNumber: String
  group: String,
}

type Conversation @model {
  id: ID!
  users: [ConversationUser] @hasMany
}

type ConversationUser @model {
  id: ID!
  userId: String! # get attribute sub of cognito
  conversation: Conversation @belongsTo
  messages: [ConversationUserMessage] @hasMany
}

type ConversationUserMessage @model {
  id: ID!
  body: String!
  user: ConversationUser @belongsTo
}

type Query {
  createChimeMeeting(title: String, name: String, region: String): Response @function(name: "visionHandleMeeting-${env}")
  joinChimeMeeting(meetingId: String, name: String): Response @function(name: "visionHandleMeeting-${env}")
  endChimeMeeting(meetingId: String): Response  @function(name: "visionHandleMeeting-${env}")
  visionTranscribe(MeetingId: String, type: String): String @function(name: "visionTranscribeV2-${env}")
  sendEmailNotification(email: String, fromName: String, meetingUrl: String, topic: String): String @function(name: "visionEmailNotification-${env}")
}

type Response {
  statusCode: String!
  headers: String
  body: String
  isBase64Encoded: String
}


