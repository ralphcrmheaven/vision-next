{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "{\"createdOn\":\"Mac\",\"createdBy\":\"Amplify\",\"createdWith\":\"8.4.0\",\"stackType\":\"custom-customCloudformation\",\"metadata\":{}}",
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "userPoolName": {
      "Type": "String"
    },
    "identityPoolName": {
      "Type": "String"
    },
    "resourceName": {
      "Type": "String"
    }
  },
  "Resources": {
    "AWSSDKChimeLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Description": "The AWS SDK with support for Amazon Chime SDK messaging features.",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs12.x"
        ],
        "Content": {
          "S3Bucket": "amazon-chime-blog-assets",
          "S3Key": "AWS_SDK_CHIME_LAYER.zip"
        }
      }
    },
    "ChimeAppInstanceLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecuteRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 60,
        "Layers": [
          {
            "Ref": "AWSSDKChimeLayer"
          }
        ],
        "Code": {
          "ZipFile": "\"use strict\"; const AWS = require(\"aws-sdk\"); const uuidv4 = require(\"uuid\"); var response = require(\"cfn-response\");  AWS.config.update({ region: process.env.AWS_REGION }); const chime = new AWS.Chime({ region: process.env.AWS_REGION }); \nexports.handler = async (event, context, callback) => {\n  console.log(\"Event: \\n\", event);\n  console.log(\"Create Chime SDK App Instance\");\n  if (event[\"RequestType\"] === \"Create\") {\n    //create a chime app instance\n    var params = {\n      Name: `AWSChimeMessagingSDKDemo-${uuidv4()}`,\n    };\n    try {\n      var chime_response = await chime.createAppInstance(\n        params,\n        function (err, data) {\n          if (err) console.log(err, err.stack);\n          // an error occurred\n          else {\n            console.log(data); // successful response\n            return data;\n          }\n        }\n      ).promise();;\n      await response.send(event, context, response.SUCCESS, chime_response);\n    } catch (error) {\n      console.log(\"ERROR CAUGHT \\n\", error);\n      await response.send(event, context, response.FAILED, {});\n    }\n  } else {\n    //NOT A CREATE REQUEST\n    await response.send(event, context, response.SUCCESS, {});\n  }\n};\n"
        }
      }
    },
    "TriggerChimeAppInstanceLambda": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ChimeAppInstanceLambda",
            "Arn"
          ]
        }
      }
    },
    "ChatAttachmentsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "HEAD",
                "PUT",
                "POST",
                "DELETE"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "ExposedHeaders": [
                "x-amz-server-side-encryption",
                "x-amz-request-id",
                "x-amz-id-2"
              ],
              "MaxAge": "3000"
            }
          ]
        }
      }
    },
    "SNSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "cognito-idp.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-CognitoSNSPolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sns:publish",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaExecuteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${resourceName}-lambdarole-${env}"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-LambdaUserCreatePolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "chime:CreateAppInstance*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-LambdaCreateLogGroup-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SignInHookLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "TriggerChimeAppInstanceLambda",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "${resourceName}-SignInHook-${env}"
        },
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecuteRole",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "AWSSDKChimeLayer"
          }
        ],
        "Timeout": 800,
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\n\nAWS.config.update({ region: process.env.AWS_REGION });\nconst chime = new AWS.Chime({ region: process.env.AWS_REGION });\n\nconst { CHIME_APP_INSTANCE_ARN } = process.env;\n\nexports.handler = async (event, context, callback) => {\n  const username = event.userName;\n  const userId = event.request.userAttributes.sub;\n\n  // 'none' is default user profile attribute in Cognito upon registration which\n  if (userId === 'none') {\n    console.log(`User hasn't logged in yet and hasn't been setup with profile`);\n    callback(null, event);\n  }\n  // Create a Chime App Instance User for the user\n  const chimeCreateAppInstanceUserParams = {\n    AppInstanceArn: CHIME_APP_INSTANCE_ARN,\n    AppInstanceUserId: userId,\n    Name: username\n  };\n\n  try {\n    console.log(`Creating app instance user for ${userId}`);\n    await chime\n      .createAppInstanceUser(chimeCreateAppInstanceUserParams)\n      .promise();\n  } catch (e) {\n    console.log(JSON.stringify(e));\n    return {\n      statusCode: 500,\n      body: e.stack\n    };\n  }\n  // Return to Amazon Cognito\n  callback(null, event);\n};\n"
        },
        "Environment": {
          "Variables": {
            "CHIME_APP_INSTANCE_ARN": {
              "Fn::GetAtt": [
                "TriggerChimeAppInstanceLambda",
                "AppInstanceArn"
              ]
            }
          }
        }
      }
    },
    "LambdaInvocationPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SignInHookLambda",
            "Arn"
          ]
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UserPool",
            "Arn"
          ]
        }
      }
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "DependsOn": "SignInHookLambda",
      "Properties": {
        "UserPoolName": {
          "Fn::Sub": "${userPoolName}-${env}"
        },
        "LambdaConfig": {
          "PostAuthentication": {
            "Fn::GetAtt": [
              "SignInHookLambda",
              "Arn"
            ]
          }
        },
        "AutoVerifiedAttributes": [
          "email"
        ]
      }
    },
    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Sub": "${resourceName}-client-${env}"
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "WriteAttributes": [
          "address",
          "birthdate",
          "family_name",
          "middle_name",
          "gender",
          "locale",
          "given_name",
          "name",
          "nickname",
          "phone_number",
          "preferred_username",
          "picture",
          "profile",
          "updated_at",
          "website",
          "zoneinfo",
          "email"
        ]
      }
    },
    "IdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": {
          "Fn::Sub": "${identityPoolName}_${env}"
        },
        "AllowUnauthenticatedIdentities": true,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "UserPoolClient"
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "UserPool",
                "ProviderName"
              ]
            }
          }
        ]
      }
    },
    "CognitoUnAuthorizedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-CognitoUnauthorizedPolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CognitoAuthorizedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-CognitoAuthorizedPolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*",
                    "cognito-identity:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-AttachmentsS3PermissionPolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ChatAttachmentsBucket"
                        },
                        "/protected/${cognito-identity.amazonaws.com:sub}/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ChatAttachmentsBucket"
                        },
                        "/protected/*"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-ChimeSDKDemoUserPolicy-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "chime:GetMessagingSessionEndpoint"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:ListUsers"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:cognito-idp:us-east-1:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":userpool/",
                        {
                          "Ref": "UserPool"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "chime:SendChannelMessage",
                    "chime:ListChannelMessages",
                    "chime:CreateChannelMembership",
                    "chime:ListChannelMemberships",
                    "chime:DeleteChannelMembership",
                    "chime:CreateChannelModerator",
                    "chime:ListChannelModerators",
                    "chime:DescribeChannelModerator",
                    "chime:CreateChannel",
                    "chime:DescribeChannel",
                    "chime:ListChannels",
                    "chime:UpdateChannel",
                    "chime:DeleteChannel",
                    "chime:RedactChannelMessage",
                    "chime:UpdateChannelMessage",
                    "chime:Connect",
                    "chime:ListChannelMembershipsForAppInstanceUser",
                    "chime:CreateChannelBan",
                    "chime:ListChannelBans",
                    "chime:DeleteChannelBan"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "TriggerChimeAppInstanceLambda",
                              "AppInstanceArn"
                            ]
                          },
                          "/user/${cognito-identity.amazonaws.com:sub}"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "TriggerChimeAppInstanceLambda",
                              "AppInstanceArn"
                            ]
                          },
                          "/channel/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          
          {
            "PolicyName": {
              "Fn::Sub": "${resourceName}-ApiGateWay-${env}"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Action": [
                          "execute-api:Invoke"
                      ],
                      "Resource": [
                          "arn:aws:execute-api:us-east-1:205131113421:9tr8izvwsi/dev/*/meetings/*",
                          "arn:aws:execute-api:us-east-1:205131113421:9tr8izvwsi/dev/*/meetings"
                      ],
                      "Effect": "Allow"
                  }
              ]
            }
          }
        ]
      }
    },
    "IdentityPoolRoleMapping": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "IdentityPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "CognitoAuthorizedRole",
              "Arn"
            ]
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "CognitoUnAuthorizedRole",
              "Arn"
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "cognitoUserPoolId": {
      "Value": {
        "Ref": "UserPool"
      }
    },
    "cognitoAppClientId": {
      "Value": {
        "Ref": "UserPoolClient"
      }
    },
    "cognitoIdentityPoolId": {
      "Value": {
        "Ref": "IdentityPool"
      }
    },
    "appInstanceArn": {
      "Value": {
        "Fn::GetAtt": [
          "TriggerChimeAppInstanceLambda",
          "AppInstanceArn"
        ]
      }
    },
    "attachmentsS3BucketName": {
      "Value": {
        "Ref": "ChatAttachmentsBucket"
      }
    }
  }
}